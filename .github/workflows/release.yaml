# Copyright (c) 2025, 2025, Oracle and/or its affiliates.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/.

name: Release Artifacts

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger for version tags.
  workflow_dispatch:  # Allows manual triggering of the workflow.
    branches:
    - main
permissions:
  contents: read

jobs:
  build:
    # Only release on `bump:` commit.
    if: ${{ startsWith(github.event.commits[0].message, 'bump:') }}
    outputs:
      release-tag: ${{ steps.release-info.outputs.release-tag }} # ${{ github.ref_name }}
      release-version: ${{ steps.release-info.outputs.release-version }}
      release-url: ${{ steps.release-info.outputs.release-url }}
    runs-on: ubuntu-latest
    name: Build Artifact Verifier Plugins
    steps:

    - name: Check out repository
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

    # Install Python to run pre-commit hooks for checking and linting GitHub Actions and other files.
    - name: Set up Python
      uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
      with:
        python-version: '3.13'

    - name: Check the code
      run: |
        pip install -r dev-requirements.txt
        pre-commit install
        pre-commit run --all-files

    # Install Java.
    - name: Set up JDK 17
      uses: actions/setup-java@c5195efecf7bdfc987ee8bae7a71cb8b11521c00 # v4.7.1
      with:
        java-version: '17'
        distribution: temurin

    # Build and test the artifacts.
    - name: Build the artifacts
      run: |
        cd artifact-verifier
        mvn install
        cd ../artifact-verifier-maven
        mvn verify
        cd ../artifact-verifier-gradle
        ./gradlew clean build publishToMavenLocal

    - name: Release Information
      id: release-info
      run: |
        # set the output ${{ github.ref_name }}
        TAG=${{ github.ref_name }}
        VERSION="${TAG#v}"
        ARTIFACT_VERIFIER_PATH="artifact-verifier/target/artifact-verifier-${VERSION}.jar"
        extracted_verifier_version=$(unzip -p $ARTIFACT_VERIFIER_PATH 'META-INF/maven/*/pom.properties' | grep '^version=' | cut -d '=' -f 2 | sed "s/^['\"]//;s/['\"]$//")
        if [[ "$VERSION" == "$extracted_verifier_version" ]]; then
          echo "VERSION matches the extracted version: $VERSION"
        else
          echo "Maven version mismatch!"
          echo "Expected: $VERSION"
          echo "Found:    $extracted_maven_version"
          exit 1
        fi
        MAVEN_PLUGIN_ARTIFACT_PATH="artifact-verifier-maven/target/local-repo/com/oracle/macaron/artifact-verifier/${VERSION}/artifact-verifier-${VERSION}.jar"
        extracted_maven_version=$(unzip -p $MAVEN_PLUGIN_ARTIFACT_PATH 'META-INF/maven/*/pom.properties' | grep '^version=' | cut -d '=' -f 2 | sed "s/^['\"]//;s/['\"]$//")
        if [[ "$VERSION" == "$extracted_maven_version" ]]; then
          echo "VERSION matches the extracted version: $VERSION"
        else
          echo "Maven version mismatch!"
          echo "Expected: $VERSION"
          echo "Found:    $extracted_maven_version"
          exit 1
        fi
        GRADLE_BUILD_PATH="artifact-verifier-gradle/artifact-verifier-gradle/build.gradle"
        extracted_gradle_version=$(grep "^version" $GRADLE_BUILD_PATH | cut -d '=' -f 2 | sed "s/^['\"]//;s/['\"]$//")
        if [[ "$VERSION" == "$extracted_gradle_version" ]]; then
          echo "VERSION matches the extracted version: $VERSION"
        else
          echo "Gradle version mismatch!"
          echo "Expected: $VERSION"
          echo "Found:    $extracted_maven_version"
          exit 1
        fi

        # All good!
        echo "release-version=$VERSION" >> "$GITHUB_OUTPUT"

    # Create the Release Notes using commitizen.
    - name: Create Release Notes
      run: cz changelog --dry-run "$(cz version --project)" > RELEASE_NOTES.md

    # Upload artifacts and release notes.
    - name: Upload artifacts and release notes
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        path: RELEASE_NOTES.md
        path: artifact-verifier-maven/target/<x>
        path: artifact-verifier-gradle/build/<x>
        if-no-files-found: error
        retention-days: 7

  # Create a new Release on GitHub from the verified build artifacts.
  release:
    needs: [build]
    name: Release
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:

    - name: Check out repository
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        fetch-depth: 0

    - name: Download artifact
      uses: actions/download-artifact@95815c38cf2ff2164869cbab79da8d1f422bc89e # v4.2.1
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: dist

    # Verify attestations for the artifacts.
    - name: Verify the artifacts
      env:
        ARTIFACT_HASH: ${{ needs.build.outputs.artifacts-sha256 }}
      run: |
        set -euo pipefail
        #TODO

    # Create the release and upload assets.
    - name: Upload assets
      id: upload-assets
      env:
        RELEASE_TAG: ${{ steps.release-info.outputs.release-tag }}
      run: gh release create "$RELEASE_TAG" dist/* --title "$RELEASE_TAG" --notes-file RELEASE_NOTES.md
